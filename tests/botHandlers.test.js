require("module-alias/register");

const { getFish, getBait } = require("@logic/gameLogic");
const { saveData } = require("@services/dataStore");

jest.mock("@services/dataStore", () => ({
  saveData: jest.fn(() => Promise.resolve()),
}));

jest.mock("@logic/gameLogic", () => ({
  getFish: jest.fn(),
  getBait: jest.fn(),
}));

const { handleStart, handleDig, handleHook, handleBag } = require("@handlers/botHandlers");

describe("botHandlers", () => {
  let message;
  let data;
  let userId;

  beforeEach(() => {
    userId = "user123";
    message = {
      reply: jest.fn(),
    };
    data = {};
    jest.clearAllMocks();
  });

  describe("handleStart", () => {
    it("replies if user already started", async () => {
      data[userId] = {};
      await handleStart(message, data, userId);
      expect(message.reply).toHaveBeenCalledWith("B·∫°n ƒë√£ b·∫Øt ƒë·∫ßu ch∆°i r·ªìi!");
      expect(saveData).not.toHaveBeenCalled();
    });

    it("starts new user and saves data", async () => {
      await handleStart(message, data, userId);
      expect(data[userId]).toEqual({
        rod: "wood",
        bait: 0,
        inventory: [],
        coins: 0,
      });
      expect(saveData).toHaveBeenCalledWith(data);
      expect(message.reply).toHaveBeenCalledWith(
        "B·∫°n ƒë√£ nh·∫≠n 1 c·∫ßn c√¢u g·ªó v√† b·∫Øt ƒë·∫ßu h√†nh tr√¨nh c√¢u c√°!"
      );
    });
  });

  describe("handleDig", () => {
    it("replies if user not started", async () => {
      await handleDig(message, data, userId);
      expect(message.reply).toHaveBeenCalledWith("B·∫°n ch∆∞a b·∫Øt ƒë·∫ßu ch∆°i. D√πng `!b·∫Øtƒë·∫ßu`.");
      expect(saveData).not.toHaveBeenCalled();
    });

    it("handles common bait", async () => {
      data[userId] = { bait: 0 };
      const baitMock = { name: "M·ªìi th∆∞·ªùng", rarity: "common" };
      getBait.mockReturnValue({ type: "common", bait: baitMock });

      await handleDig(message, data, userId);

      expect(data[userId].bait).toBe(1);
      expect(saveData).toHaveBeenCalledWith(data);
      expect(message.reply).toHaveBeenCalledWith(
        `B·∫°n t√¨m ƒë∆∞·ª£c m·ªìi **${baitMock.name}** (ƒê·ªô hi·∫øm: ${baitMock.rarity})!`
      );
    });

    it("handles trash", async () => {
      data[userId] = { bait: 0 };
      getBait.mockReturnValue({ type: "trash", trash: "R√°c th·∫£i" });

      await handleDig(message, data, userId);

      expect(saveData).not.toHaveBeenCalled();
      expect(message.reply).toHaveBeenCalledWith(`B·∫°n t√¨m ƒë∆∞·ª£c r√°c: R√°c th·∫£i...`);
    });

    it("handles rare bait", async () => {
      data[userId] = { bait: 0 };
      const baitMock = { name: "M·ªìi hi·∫øm", rarity: "rare" };
      getBait.mockReturnValue({ type: "rare", bait: baitMock });

      await handleDig(message, data, userId);

      expect(data[userId].bait).toBe(1);
      expect(saveData).toHaveBeenCalledWith(data);
      expect(message.reply).toHaveBeenCalledWith(
        `B·∫°n r·∫•t may m·∫Øn! Nh·∫∑t ƒë∆∞·ª£c m·ªìi hi·∫øm **${baitMock.name}**!`
      );
    });
  });

  describe("handleHook", () => {
    it("replies if user not started", async () => {
      await handleHook(message, data, userId);
      expect(message.reply).toHaveBeenCalledWith("B·∫°n ch∆∞a b·∫Øt ƒë·∫ßu ch∆°i. D√πng `!b·∫Øtƒë·∫ßu`.");
      expect(saveData).not.toHaveBeenCalled();
    });

    it("replies if no bait", async () => {
      data[userId] = { bait: 0 };
      await handleHook(message, data, userId);
      expect(message.reply).toHaveBeenCalledWith("B·∫°n kh√¥ng c√≥ m·ªìi. D√πng `!ƒë√†o` ƒë·ªÉ t√¨m m·ªìi.");
      expect(saveData).not.toHaveBeenCalled();
    });

    it("handles missed catch", async () => {
      data[userId] = { bait: 1, rod: "wood", inventory: [] };
      getFish.mockReturnValue({ type: "miss" });

      await handleHook(message, data, userId);

      expect(data[userId].bait).toBe(0);
      expect(saveData).toHaveBeenCalledWith(data);
      expect(message.reply).toHaveBeenCalledWith("B·∫°n h·ª•t r·ªìi! Kh√¥ng c√¢u ƒë∆∞·ª£c g√¨...");
    });

    it("handles successful catch", async () => {
      data[userId] = { bait: 1, rod: "wood", inventory: [] };
      const fishMock = "C√° V√†ng";
      getFish.mockReturnValue({ type: "catch", fish: fishMock });

      await handleHook(message, data, userId);

      expect(data[userId].bait).toBe(0);
      expect(data[userId].inventory).toContain(fishMock);
      expect(saveData).toHaveBeenCalledWith(data);
      expect(message.reply).toHaveBeenCalledWith(`B·∫°n c√¢u ƒë∆∞·ª£c **${fishMock}**! üé£`);
    });
  });

  describe("handleBag", () => {
    it("replies if user not started", async () => {
      await handleBag(message, data, userId);
      expect(message.reply).toHaveBeenCalledWith("B·∫°n ch∆∞a b·∫Øt ƒë·∫ßu ch∆°i. D√πng `!b·∫Øtƒë·∫ßu`.");
    });

    it("shows empty bag", async () => {
      data[userId] = { bait: 5, inventory: [] };
      await handleBag(message, data, userId);
      expect(message.reply).toHaveBeenCalledWith("M·ªìi: 5 | T√∫i c√°: Tr·ªëng");
    });

    it("shows bag with fish", async () => {
      data[userId] = { bait: 3, inventory: ["C√° ch√©p", "C√° tr·∫Øm"] };
      await handleBag(message, data, userId);
      expect(message.reply).toHaveBeenCalledWith("M·ªìi: 3 | T√∫i c√°: C√° ch√©p, C√° tr·∫Øm");
    });
  });
});
